{
    "collab_server" : "",
    "contents" : "# \n# Annual evaluation\n# \nrequire(readr)\nlibrary(shiny)\nrequire(ggplot2)\nlibrary(grid)\nrequire(tools)\nrequire(reshape2)\nrequire(gridExtra)\nrequire(magrittr)\nrequire(markdown)\nplot.fn = function(data,title){\n  names(data) = c(\"grader\",\"raw\",\"resid\")\n  data = na.omit(data)\n  plot1 = ggplot(data, aes(as.factor(grader),raw)) + \n    geom_violin(aes(fill=as.factor(grader))) + \n    ylab(\"Original data\")+ xlab(\"Grader ID\") + \n    theme_bw(base_size = 14) + guides(fill=FALSE) +\n    stat_summary(fun.y=mean, geom=\"point\", shape=19, size=2)\n  plot2 = ggplot(data, aes(as.factor(grader),resid)) + \n    geom_violin(aes(fill=as.factor(grader))) + \n    ylab(\"Residuals\") + xlab(\"Grader ID\") +\n    theme_bw(base_size = 14) + guides(fill=FALSE) +\n    stat_summary(fun.y=mean, geom=\"point\", shape=19, size=2)\n  grid.arrange(plot1, plot2, ncol = 2, top =textGrob(title, gp=gpar(fontsize=16)))\n}\n\nplot.monthly.fn = function(data,title){\n  names(data) = c(\"grader\",\"raw\",\"resid\",\"month\")\n  data = na.omit(data)\n  data$month = ordered(data$month, month.name)\n  plot1 = ggplot(data, aes(as.factor(grader),raw)) + \n    geom_violin(aes(fill=as.factor(grader))) + \n    facet_wrap(~month, ncol=2) +\n    ylab(\"Original data\")+ xlab(\"Grader ID\") + \n    theme_bw(base_size = 14) + guides(fill=FALSE) +\n    stat_summary(fun.y=mean, geom=\"point\", shape=19, size=2)\n  plot2 = ggplot(data, aes(as.factor(grader),resid)) + \n    geom_violin(aes(fill=as.factor(grader))) + \n    facet_wrap(~month, ncol=2) +\n    ylab(\"Residuals\") + xlab(\"Grader ID\") +\n    theme_bw(base_size = 14) + guides(fill=FALSE) +\n    stat_summary(fun.y=mean, geom=\"point\", shape=19, size=2)\n  grid.arrange(plot1, plot2, ncol = 2, top =textGrob(title, gp=gpar(fontsize=16)))\n}\n\nplot.monthly.fn2 = function(data,title){\n  names(data) = c(\"grader\",\"raw\",\"resid\",\"month\")\n  data = na.omit(data)\n  data$month = ordered(data$month, month.name)\n  levels(data$month) = month.abb\n  # plot1 = ggplot(data, aes(as.factor(month),raw)) + \n  #   geom_violin(aes(fill=as.factor(month))) + \n  #   facet_wrap(~grader, ncol=1) +\n  #   ylab(\"Original data\")+ xlab(\"Grader ID\") + \n  #   theme_bw(base_size = 14) + guides(fill=FALSE) +\n  #   stat_summary(fun.y=mean, geom=\"point\", shape=19, size=2)\n  plot2 = ggplot(data, aes(as.factor(month),resid)) + \n    geom_violin(aes(fill=as.factor(month))) + \n    facet_wrap(~grader, ncol=1) +\n    ylab(\"Residuals\") + xlab(\"\") +\n    theme_bw(base_size = 14) + guides(fill=FALSE) +\n    stat_summary(fun.y=mean, geom=\"point\", shape=19, size=2)\n  return(plot2)\n  # grid.arrange(plot1, plot2, ncol = 2, top =textGrob(title, gp=gpar(fontsize=16)))\n}\n\n\noall.plot = function(data,variable,title){\n  ggplot(data, aes_string(variable)) +\n    geom_density() + theme_bw(base_size = 14) + \n    xlab(title) + ylab(\"Frequency\") #+ \n  #title(title)\n}\n\nui <- fluidPage(\n  \n  tags$head(\n    tags$style(HTML(\".pagebreak { page-break-before: always; } // page-break-after works, as well\n                    \"))\n  ),\n  \n  titlePanel(\"Grader evaluation\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      fileInput('file1', 'Upload csv file (or zipped csv file)'),\n      \n      h4(\"Subset the data\"),\n      uiOutput(\"uiselect\"),\n      br(),\n      p(\"Printing works best with the Google Chrome browser.\"),\n      br(),\n      div(align = \"center\",\n          div(img(src = \"mla_logo_home.jpg\",width = \"150px\")),\n          #tags$small(\"MLA project V.EQT.1513\"),\n          #br(),\n          icon(\"envelope\"),\n          HTML(paste(\"<a href='mailto:garth.tarr@gmail.com'>\")),\n          tags$small(\"garth.tarr@gmail.com\"),\n          HTML(paste(\"</a>\"))\n      )\n    ),\n    \n    # Show a plot of the generated distribution\n    mainPanel(\n      tabsetPanel(id = \"tabpanel\",\n                  tabPanel(\"Main\", \n                           textOutput(\"graderText\"),\n                           DT::dataTableOutput(\"graderTable\"),\n                           br(),\n                           textOutput(\"graderMonthText\"),\n                           DT::dataTableOutput(\"graderMonthTable\")\n                           \n                  ),\n                  tabPanel(\"Raw data\",\n                           plotOutput(\"discretePlot\",height = \"200px\"),\n                           plotOutput(\"continuousPlot\"),\n                           h3(\"How to interpret the violin plots\"),\n                           p(\"The violin plots for continuous data (as seen above) are mirror image density plots (seen below).  The standard density plots (seen below) are like smoothed histograms.  When viewed as a violin plot, they look similar to a boxplot, but enables the viewer to see more detail, especially with respect to the lumpiness of the data, than a boxplot.  The average (sample mean) of the data set is indicated as a solid dot.\"),\n                           plotOutput(\"msamarblingPlot\"),\n                           plotOutput(\"humpcoldPlot\"),\n                           plotOutput(\"ossificationcoldPlot\"),\n                           plotOutput(\"ribfatcoldPlot\"),\n                           plotOutput(\"phPlot\"),\n                           plotOutput(\"totalhscwPlot\")#,\n                           # plotOutput(\"feedtypePlot\"),\n                           # plotOutput(\"sexPlot\"),\n                           # plotOutput(\"hgpPlot\")\n                  ),\n                  tabPanel(\"Model outputs\",\n                           h3(\"Predictive ability\"),\n                           DT::dataTableOutput(\"PredictiveTab\"),\n                           h3(\"MSA marbling model\"),\n                           verbatimTextOutput(\"marbOutputs\"),\n                           h3(\"Hump height model\"),\n                           verbatimTextOutput(\"humpOutputs\"),\n                           h3(\"Ossification model\"),\n                           verbatimTextOutput(\"ossOutputs\"),\n                           h3(\"Rib fat model\"),\n                           verbatimTextOutput(\"rbfOutputs\"),\n                           h3(\"pH model\"),\n                           verbatimTextOutput(\"phOutputs\")\n                  ),\n                  tabPanel(\"Grader assessment\",\n                           h3(\"Average residuals\"),\n                           DT::dataTableOutput(\"GraderTab\"),\n                           h3(\"Standard deviation of residuals\"),\n                           DT::dataTableOutput(\"GraderSdTab\"),\n                           h3(\"Effect size\"),\n                           p(\"The effect size is the difference in average residual score divided by the overall residual standard deviation.  The numbers in the table below are the effect size relative to zero.  It's better to consider the difference in effect size between any two graders, for example if one grader had an effect size of 0.3 and another had an effect size of -0.4 then the effect size between the two graders would be 0.7. A small effect size is 0.2, medium (probably worth investigating further) is around 0.5 and large (quite unusual) would be 0.8 or more.\"),\n                           DT::dataTableOutput(\"GraderEffectTab\"),\n                           shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                           h3(\"MSA marbling model\"),\n                           plotOutput(\"marbGraderPlot\"),\n                           h3(\"Hump height model\"),\n                           plotOutput(\"humpGraderPlot\"),\n                           shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                           h3(\"Ossification model\"),\n                           plotOutput(\"ossGraderPlot\"),\n                           h3(\"Rib fat model\"),\n                           plotOutput(\"rbfGraderPlot\"),\n                           shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                           h3(\"pH model\"),\n                           plotOutput(\"phGraderPlot\")\n                  ),\n                  tabPanel(\"Monthly plots\",\n                           shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                           h3(\"MSA marbling model\"),\n                           plotOutput(\"MarblingResidPlot\"),\n                           plotOutput(\"MarblingEffectPlot\"),\n                           shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                           h3(\"Hump height model\"),\n                           plotOutput(\"HumpResidPlot\"),\n                           plotOutput(\"HumpEffectPlot\"),\n                           shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                           h3(\"Ossification model\"),\n                           plotOutput(\"OssificationResidPlot\"),\n                           plotOutput(\"OssificationEffectPlot\"),\n                           shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                           h3(\"Rib fat model\"),\n                           plotOutput(\"RibfatResidPlot\"),\n                           plotOutput(\"RibfatEffectPlot\"),\n                           shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                           h3(\"pH model\"),\n                           plotOutput(\"pHResidPlot\"),\n                           plotOutput(\"pHEffectPlot\")\n                  ),\n                  tabPanel(\"Monthly summary\",value = \"ms2\",\n                           shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                           h3(\"Average residuals\"),\n                           DT::dataTableOutput(\"GraderMonthTab\"),\n                           h3(\"Standard deviation of residuals\"),\n                           DT::dataTableOutput(\"GraderSDMonthTab\"),\n                           h3(\"Effect size\"),\n                           DT::dataTableOutput(\"GraderEffectMonthTab\")\n                  ),\n                  tabPanel(\"Help\",\n                           includeMarkdown(\"help.Rmd\")\n                           #includeHTML(\"help.html\")\n                           )#,\n                  # tabPanel(\"Summary plots\", value = \"ms1\",\n                  #          shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                  #          h3(\"MSA marbling\"),\n                  #          plotOutput(\"marbGraderMonthlyPlot2\"),\n                  #          h3(\"Hump height\"),\n                  #          plotOutput(\"humpGraderMonthlyPlot2\"),\n                  #          shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                  #          h3(\"Ossification\"),\n                  #          plotOutput(\"ossGraderMonthlyPlot2\"),\n                  #          h3(\"Rib fat\"),\n                  #          plotOutput(\"rbfGraderMonthlyPlot2\"),\n                  #          shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                  #          h3(\"pH\"),\n                  #          plotOutput(\"phGraderMonthlyPlot2\")\n                  # )#,\n                  # tabPanel(\"Other plots\",\n                  #          h3(\"MSA marbling\"),\n                  #          plotOutput(\"marbGraderMonthlyPlot\",height = \"600px\"),\n                  #          h3(\"Hump height\"),\n                  #          plotOutput(\"humpGraderMonthlyPlot\",height = \"600px\"),\n                  #          shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                  #          h3(\"Ossification\"),\n                  #          plotOutput(\"ossGraderMonthlyPlot\",height = \"600px\"),\n                  #          h3(\"Rib fat\"),\n                  #          plotOutput(\"rbfGraderMonthlyPlot\",height = \"600px\"),\n                  #          shiny::HTML(\"<div class='pagebreak'> </div>\"),\n                  #          h3(\"pH\"),\n                  #          plotOutput(\"phGraderMonthlyPlot\",height = \"600px\")\n                  # )\n      )\n    )\n  )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  \n  options(shiny.maxRequestSize=50*1024^2) \n  \n  datain <- reactive({\n    inFile <- input$file1\n    validate(\n      need(!is.null(input$file1), \"Please upload a data set\")\n    )\n    if (is.null(inFile))\n      return(NULL)\n    \n    input_file_format <- tools::file_ext(inFile$name)\n    new_file_name <- paste0(inFile$datapath, \".\", input_file_format)\n    file.rename(inFile$datapath, new_file_name)\n    dat <- readr::read_csv(new_file_name, \n                           col_types = cols(Grader_No = col_character(),\n                                            Grader_no = col_character(),\n                                            grader_no = col_character(),\n                                            Grader = col_character(),\n                                            grader = col_character(),\n                                            GradeDate = col_date(format = \"%d/%m/%Y\"), \n                                            gradedate = col_date(format = \"%d/%m/%Y\"), \n                                            gradeDate = col_date(format = \"%d/%m/%Y\")#, \n                                            #gradetime = col_time(format = \"%H:%M:%S\"), \n                                            #killtime = col_time(format = \"%H:%M:%S\"), \n                                            #KillDate = col_date(format = \"%d/%m/%Y\")\n                                            )\n                           )\n    names(dat) = tolower(make.names(names(dat)))\n    dat$month = months(dat$gradedate)\n    colnames(dat)[colnames(dat)==\"grader_no\"] = \"grader\"\n    return(dat)\n  })\n  \n  data = reactive({\n    dat = datain()\n    if(!is.null(input$selectSex)){\n      dat = subset(dat,subset = is.element(dat$sex,input$selectSex))\n    }\n    if(!is.null(input$selectHGP)){\n      dat = subset(dat,subset = is.element(dat$hgp,input$selectHGP))\n    }\n    if(!is.null(input$selectfeed)){\n      dat = subset(dat,subset = is.element(dat$feedtype,input$selectfeed))\n    }\n    if(!is.null(input$selectmonth)){\n      dat = subset(dat,subset = is.element(dat$month,input$selectmonth))\n    }\n    if(!is.null(input$selectgrader)){\n      dat = subset(dat,subset = is.element(dat$grader,input$selectgrader))\n    }\n    return(dat)\n  })\n  output$uiselect = renderUI({\n    list(\n      conditionalPanel(\n        condition = \"input.tabpanel == 'ms1' | input.tabpanel == 'ms2'\",\n        uiOutput(\"graderSelect\")\n      ),\n      conditionalPanel(\n        condition = \"input.tabpanel != 'ms1' & input.tabpanel != 'ms2'\",\n        selectizeInput(\"selectSex\",label = \"Sex\",\n                       choices = names(table(datain()$sex)),\n                       multiple = TRUE,\n                       selected = NULL),\n        selectizeInput(\"selectHGP\",label = \"HGP\",\n                       choices = names(table(datain()$hgp)),\n                       multiple = TRUE,\n                       selected = NULL),\n        selectizeInput(\"selectfeed\",label = \"Feed type\",\n                       choices = names(table(datain()$feedtype)),\n                       multiple = TRUE,\n                       selected = NULL),\n        selectizeInput(\"selectmonth\",label = \"Month\",\n                       choices = month.name[is.element(month.name,names(table(datain()$month)))],\n                       multiple = TRUE,\n                       selected = NULL),\n        \n        selectizeInput(\"selectgrader\",label = \"Graders\",\n                       choices = names(table(datain()$grader)),\n                       multiple = TRUE,\n                       selected = names(table(datain()$grader)))\n      )\n    )\n  })\n  \n  output$phPlot <- renderPlot({\n    #hist(data()$ph,main=\"pH\")\n    oall.plot(data = data(),\n              variable = \"ph\", \n              title = \"pH\")\n  })\n  output$msamarblingPlot <- renderPlot({\n    #hist(data()$msamarbling,main = \"MSA marbling scores\")\n    oall.plot(data = data(),\n              variable = \"msamarbling\", \n              title = \"MSA marbling\")\n  })\n  output$humpcoldPlot <- renderPlot({\n    #hist(data()$humpcold,main = \"Hump height\")\n    oall.plot(data = data(),\n              variable = \"humpcold\", \n              title = \"Hump height\")\n  })\n  output$ossificationcoldPlot <- renderPlot({\n    #hist(data()$ossificationcold,main = \"Ossification\")\n    oall.plot(data = data(),\n              variable = \"ossificationcold\", \n              title = \"Ossification\")\n  })\n  output$ribfatcoldPlot <- renderPlot({\n    #hist(data()$ribfatcold,main = \"Rib fat\")\n    oall.plot(data = data(),\n              variable = \"ribfatcold\", \n              title = \"Rib fat\")\n  })\n  output$totalhscwPlot <- renderPlot({\n    #hist(data()$totalhscw, main = \"Hot carcase weight\")\n    oall.plot(data = data(),\n              variable = \"totalhscw\", \n              title = \"Hot carcase weight\")\n  })\n  \n  output$continuousPlot <- renderPlot({\n    tst1 = reshape2::melt(data()[,c(\"grader\",\"msamarbling\",\"ph\",\"humpcold\",\"ossificationcold\",\"ribfatcold\",\"totalhscw\")],\n                          measure.vars = c(\"msamarbling\",\"humpcold\",\"ossificationcold\",\"ribfatcold\",\"ph\",\"totalhscw\"))\n    \n    var1_names <- c(\n      `msamarbling`=\"MSA marbling\",\n      `humpcold`=\"Hump height\",\n      `ph`=\"pH\",\n      `ossificationcold`=\"Ossification\",\n      `ribfatcold`=\"Rib fat\",\n      `totalhscw`=\"Hot carcase weight\"\n    )\n    \n    ggplot(data=tst1,aes(x=variable,y=value)) + geom_violin() + \n      facet_wrap(~variable, scales=\"free\", labeller = as_labeller(var1_names)) + \n      xlab(\"\") + ylab(\"\") + theme_bw(base_size = 14) + \n      theme(axis.text.x=element_blank(),\n            axis.ticks.x=element_blank()) + \n      stat_summary(aes(group=variable),fun.y=mean, geom=\"point\", shape=19, size=2)\n    \n  })\n  \n  output$discretePlot <- renderPlot({\n    tst2 = reshape2::melt(data()[,c(\"grader\",\"feedtype\",\"sex\",\"hgp\")],measure.vars = c(\"feedtype\",\"sex\",\"hgp\"))\n    \n    var2_names <- c(\n      `feedtype`=\"Feed type\",\n      `sex`=\"Sex\",\n      `hgp`=\"HGP\"\n    )\n    \n    ggplot(tst2) + geom_bar(aes(as.factor(value))) + \n      facet_grid(~variable, labeller = as_labeller(var2_names),\n                 scale=\"free_x\", space = \"free_x\") + \n      xlab(\"\") + ylab(\"\") + theme_bw(base_size = 14) \n  })\n  # output$feedtypePlot <- renderPlot({\n  #   plot(table(data()$feedtype),main = \"Feed type\")\n  # })\n  # output$sexPlot <- renderPlot({\n  #   plot(table(data()$sex),main = \"Sex\")\n  # })\n  # output$hgpPlot <- renderPlot({\n  #   plot(table(data()$hgp),main = \"HGP\")\n  # })\n  \n  output$graderText = renderText({\n    validate(\n      need(!is.null(input$file1), \"\")\n    )\n    paste(\"The following graders have been identified in the data set:\")\n  })\n  output$graderTable = DT::renderDataTable({\n    tab = data.frame(table(data()$grader))\n    colnames(tab) = c(\"Grader ID\",\"Number of carcases graded\")\n    DT::datatable(tab,rownames = FALSE,options = list(dom = 't'))\n  })\n  \n  output$graderMonthText = renderText({\n    validate(\n      need(!is.null(input$file1), \"\")\n    )\n    paste(\"Number of carcases graded by each grader broken down by month:\")\n  })\n  \n  output$graderMonthTable = DT::renderDataTable({\n    if (is.null(input$file1))\n      return(NULL)\n    x = data()\n    x$month = ordered(x$month,month.name[is.element(month.name,names(table(x$month)))])\n    tab = as.data.frame.matrix(table(x$month,x$grader))\n    #colnames(tab) = c(\"Grader ID\",\"Number of carcases graded\")\n    DT::datatable(tab,rownames = TRUE,options = list(dom = 't',pageLength = 12))\n  })\n  \n  \n  model.data = reactive({\n    mdat = subset(data(),select=c(\"ph\",\"feedtype\",\n                                  \"sex\",\"hgp\",\n                                  \"msamarbling\",\"humpcold\",\n                                  \"ossificationcold\",\"ribfatcold\",\n                                  \"totalhscw\",\"month\"))\n    \n    if(dim(table(data()$sex))<=1){\n      mdat = subset(mdat, select = -sex)\n    }\n    if(dim(table(data()$hgp))<=1){\n      mdat = subset(mdat, select = -hgp)\n    }\n    if(dim(table(data()$feedtype))<=1){\n      mdat = subset(mdat, select = -feedtype)\n    }\n    \n    if(dim(table(data()$month))<=1){\n      mdat = subset(mdat, select = -month)\n    }\n    return(mdat)\n    \n  })\n  \n  ph.mod = reactive({\n    lm(ph ~ ., data = model.data())\n  })\n  marb.mod = reactive({\n    lm(msamarbling ~ ., data = model.data())\n  })\n  hump.mod = reactive({\n    lm(humpcold ~ ., data = model.data())\n  })\n  oss.mod = reactive({\n    lm(ossificationcold ~ ., data = model.data())\n  })\n  rbf.mod = reactive({\n    lm(ribfatcold ~ ., data = model.data())\n  })  \n  output$marbOutputs = renderPrint({\n    summary(marb.mod())\n  })\n  output$phOutputs = renderPrint({\n    summary(ph.mod())\n  })\n  output$humpOutputs = renderPrint({\n    summary(hump.mod())\n  })\n  output$ossOutputs = renderPrint({\n    summary(oss.mod())\n  })\n  output$rbfOutputs = renderPrint({\n    summary(rbf.mod())\n  })\n  \n  output$phGraderPlot = renderPlot({\n    ph.dat = data.frame(data()$grader,data()$ph,ph.mod()$residuals)\n    plot.fn(data = ph.dat, title = \"pH\")\n  })\n  \n  \n  \n  \n  output$rbfGraderPlot = renderPlot({\n    rbf.dat = data.frame(data()$grader,data()$ribfatcold,rbf.mod()$residuals)\n    plot.fn(data = rbf.dat, title = \"Rib fat\")\n  })\n  output$humpGraderPlot = renderPlot({\n    hump.dat = data.frame(data()$grader,data()$humpcold,hump.mod()$residuals)\n    plot.fn(data = hump.dat, title = \"Hump height\")\n  })\n  output$marbGraderPlot = renderPlot({\n    marb.dat = data.frame(data()$grader,data()$msamarbling,marb.mod()$residuals)\n    plot.fn(data = marb.dat, title = \"MSA marbling\")\n  })\n  output$marbGraderText = renderText({\n    if(marb.mod()$r.sq>0.2){\n      return(\"This model has quite reasonable predictive accuracy.\")\n    } else if(marb.mod()$r.sq>0.1){\n      return(\"This model has moderate predictive accuracy.\")\n    } else {\n      return(\"This model has very limited predictive accuracy, so interpret any results with caution.\")\n    }\n  })\n  \n  output$GraderTab = DT::renderDataTable({\n    marb.resid = aggregate(marb.mod()$resid,by=list(data()$grader),mean)\n    hump.resid = aggregate(hump.mod()$resid,by=list(data()$grader),mean)\n    oss.resid = aggregate(oss.mod()$resid,by=list(data()$grader),mean)\n    rbf.resid = aggregate(rbf.mod()$resid,by=list(data()$grader),mean)\n    ph.resid = aggregate(ph.mod()$resid,by=list(data()$grader),mean)\n    x = data.frame(marb.resid,hump.resid[,2],oss.resid[,2],rbf.resid[,2],ph.resid[,2])\n    colnames(x) = c(\"Grader ID\",\"Marbling score\",\"Hump height\",\"Ossification\",\"Rib fat\",\"pH\")\n    DT::datatable(x,rownames = FALSE,options = list(dom = 't')) %>% DT::formatRound(columns = 2:6,digits=2)\n  })\n  \n  output$graderSelect = renderUI({\n    selectizeInput(\"individualGrader\",label=\"Summary details for which grader?\",\n                   choices = input$selectgrader)\n  })\n  \n  output$GraderMonthTab = DT::renderDataTable({\n    marb.resid = aggregate(marb.mod()$resid,by=list(data()$grader,data()$month),mean)\n    hump.resid = aggregate(hump.mod()$resid,by=list(data()$grader,data()$month),mean)\n    oss.resid = aggregate(oss.mod()$resid,by=list(data()$grader,data()$month),mean)\n    rbf.resid = aggregate(rbf.mod()$resid,by=list(data()$grader,data()$month),mean)\n    ph.resid = aggregate(ph.mod()$resid,by=list(data()$grader,data()$month),mean)\n    x = data.frame(marb.resid,hump.resid[,3],oss.resid[,3],rbf.resid[,3],ph.resid[,3])\n    \n    colnames(x) = c(\"Grader ID\",\"Month\",\"Marbling score\",\"Hump height\",\"Ossification\",\"Rib fat\",\"pH\")\n    x = subset(x,x[,1]==input$individualGrader)\n    x$MonthNo = ordered(x$Month,month.name)\n    levels(x$MonthNo) = 1:12\n    DT::datatable(x, rownames = FALSE, \n                  options = list(dom = 't',\n                                 pageLength = 12, \n                                 order=list(list(7,'asc'))\n                  )\n    ) %>% DT::formatRound(columns = 3:7,digits=2)\n  })\n  \n  \n  output$GraderEffectTab = DT::renderDataTable({\n    marb.resid = aggregate(marb.mod()$resid,by=list(data()$grader),mean)\n    hump.resid = aggregate(hump.mod()$resid,by=list(data()$grader),mean)\n    oss.resid = aggregate(oss.mod()$resid,by=list(data()$grader),mean)\n    rbf.resid = aggregate(rbf.mod()$resid,by=list(data()$grader),mean)\n    ph.resid = aggregate(ph.mod()$resid,by=list(data()$grader),mean)\n    x = data.frame(marb.resid[,1],\n                   marb.resid[,2]/sd(marb.mod()$resid),\n                   hump.resid[,2]/sd(hump.mod()$resid),\n                   oss.resid[,2]/sd(oss.mod()$resid),\n                   rbf.resid[,2]/sd(rbf.mod()$resid),\n                   ph.resid[,2]/sd(ph.mod()$resid))\n    colnames(x) = c(\"Grader ID\",\"Marbling score\",\"Hump height\",\"Ossification\",\"Rib fat\",\"pH\")\n    DT::datatable(x,rownames = FALSE,options = list(dom = 't')) %>% DT::formatRound(columns = 2:6,digits=2)\n  })\n  \n  MonthEffect = reactive({\n    marb.resid = aggregate(marb.mod()$resid,by=list(data()$grader,data()$month),mean)\n    hump.resid = aggregate(hump.mod()$resid,by=list(data()$grader,data()$month),mean)\n    oss.resid = aggregate(oss.mod()$resid,by=list(data()$grader,data()$month),mean)\n    rbf.resid = aggregate(rbf.mod()$resid,by=list(data()$grader,data()$month),mean)\n    ph.resid = aggregate(ph.mod()$resid,by=list(data()$grader,data()$month),mean)\n    n.resid = aggregate(ph.mod()$resid,by=list(data()$grader,data()$month),length)\n    x = data.frame(marb.resid[,1],marb.resid[,2],\n                   marb.resid[,3]/sd(marb.mod()$resid),\n                   hump.resid[,3]/sd(hump.mod()$resid),\n                   oss.resid[,3]/sd(oss.mod()$resid),\n                   rbf.resid[,3]/sd(rbf.mod()$resid),\n                   ph.resid[,3]/sd(ph.mod()$resid),\n                   n.resid[,3])\n    colnames(x) = c(\"Grader\",\"Month\",\"Marbling\",\"Hump\",\"Ossification\",\"Ribfat\",\"pH\",\"n\")\n    x$Month = ordered(x$Month,month.name)\n    levels(x$Month) = month.abb\n    return(x)\n  })\n  \n  MonthResid = reactive({\n    marb.resid = aggregate(marb.mod()$resid,by=list(data()$grader,data()$month),mean)\n    hump.resid = aggregate(hump.mod()$resid,by=list(data()$grader,data()$month),mean)\n    oss.resid = aggregate(oss.mod()$resid,by=list(data()$grader,data()$month),mean)\n    rbf.resid = aggregate(rbf.mod()$resid,by=list(data()$grader,data()$month),mean)\n    ph.resid = aggregate(ph.mod()$resid,by=list(data()$grader,data()$month),mean)\n    n.resid = aggregate(ph.mod()$resid,by=list(data()$grader,data()$month),length)\n    x = data.frame(marb.resid[,1],marb.resid[,2],\n                   marb.resid[,3],\n                   hump.resid[,3],\n                   oss.resid[,3],\n                   rbf.resid[,3],\n                   ph.resid[,3],\n                   n.resid[,3])\n    colnames(x) = c(\"Grader\",\"Month\",\"Marbling\",\"Hump\",\"Ossification\",\"Ribfat\",\"pH\",\"n\")\n    x$Month = ordered(x$Month,month.name)\n    levels(x$Month) = month.abb\n    return(x)\n  })\n  \n  \n  \n  output$MarblingResidPlot = renderPlot({\n    x = MonthResid()\n    ggplot(data=x, aes(x=Month, y=Marbling, group=Grader)) +\n      geom_line(aes(color=Grader)) +\n      geom_point(aes(color=Grader,size=n)) +\n      ylab(\"Average marbling score residual\") +\n      theme_bw(base_size = 14) \n  })\n  \n  output$HumpResidPlot = renderPlot({\n    x = MonthResid()\n    ggplot(data=x, aes(x=Month, y=Hump, group=Grader)) +\n      geom_line(aes(color=Grader)) +\n      geom_point(aes(color=Grader,size=n)) +\n      ylab(\"Average hump height residual\") +\n      theme_bw(base_size = 14) \n  })\n  \n  output$OssificationResidPlot = renderPlot({\n    x = MonthResid()\n    ggplot(data=x, aes(x=Month, y=Ossification, group=Grader)) +\n      geom_line(aes(color=Grader)) +\n      geom_point(aes(color=Grader,size=n)) +\n      ylab(\"Average ossification residual\") +\n      theme_bw(base_size = 14) \n  })\n  \n  output$RibfatResidPlot = renderPlot({\n    x = MonthResid()\n    ggplot(data=x, aes(x=Month, y=Ribfat, group=Grader)) +\n      geom_line(aes(color=Grader)) +\n      geom_point(aes(color=Grader,size=n)) +\n      ylab(\"Average ribfat residual\") +\n      theme_bw(base_size = 14) \n  })\n  \n  output$pHResidPlot = renderPlot({\n    x = MonthResid()\n    ggplot(data=x, aes(x=Month, y=pH, group=Grader)) +\n      geom_line(aes(color=Grader)) +\n      geom_point(aes(color=Grader,size=n)) +\n      ylab(\"Average pH residual\") +\n      theme_bw(base_size = 14) \n  })\n  \n  output$MarblingEffectPlot = renderPlot({\n    x = MonthEffect()\n    ggplot(data=x, aes(x=Month, y=Marbling, group=Grader)) +\n      geom_line(aes(color=Grader)) +\n      geom_point(aes(color=Grader,size=n)) +\n      ylab(\"Marbling score effect size\") +\n      theme_bw(base_size = 14) \n  })\n  \n  output$HumpEffectPlot = renderPlot({\n    x = MonthEffect()\n    ggplot(data=x, aes(x=Month, y=Hump, group=Grader)) +\n      geom_line(aes(color=Grader)) +\n      geom_point(aes(color=Grader,size=n)) +\n      ylab(\"Hump height effect size\") +\n      theme_bw(base_size = 14) \n  })\n  \n  output$OssificationEffectPlot = renderPlot({\n    x = MonthEffect()\n    ggplot(data=x, aes(x=Month, y=Ossification, group=Grader)) +\n      geom_line(aes(color=Grader)) +\n      geom_point(aes(color=Grader,size=n)) +\n      ylab(\"Ossification effect size\") +\n      theme_bw(base_size = 14) \n  })\n  \n  output$RibfatEffectPlot = renderPlot({\n    x = MonthEffect()\n    ggplot(data=x, aes(x=Month, y=Ribfat, group=Grader)) +\n      geom_line(aes(color=Grader)) +\n      geom_point(aes(color=Grader,size=n)) +\n      ylab(\"Rib fat effect size\") +\n      theme_bw(base_size = 14) \n  })\n  \n  output$pHEffectPlot = renderPlot({\n    x = MonthEffect()\n    ggplot(data=x, aes(x=Month, y=pH, group=Grader)) +\n      geom_line(aes(color=Grader)) +\n      geom_point(aes(color=Grader,size=n)) +\n      ylab(\"Average pH residual\") +\n      theme_bw(base_size = 14) \n  })\n  \n  output$GraderEffectMonthTab = DT::renderDataTable({\n    marb.resid = aggregate(marb.mod()$resid,by=list(data()$grader,data()$month),mean)\n    hump.resid = aggregate(hump.mod()$resid,by=list(data()$grader,data()$month),mean)\n    oss.resid = aggregate(oss.mod()$resid,by=list(data()$grader,data()$month),mean)\n    rbf.resid = aggregate(rbf.mod()$resid,by=list(data()$grader,data()$month),mean)\n    ph.resid = aggregate(ph.mod()$resid,by=list(data()$grader,data()$month),mean)\n    x = data.frame(marb.resid[,1],marb.resid[,2],\n                   marb.resid[,3]/sd(marb.mod()$resid),\n                   hump.resid[,3]/sd(hump.mod()$resid),\n                   oss.resid[,3]/sd(oss.mod()$resid),\n                   rbf.resid[,3]/sd(rbf.mod()$resid),\n                   ph.resid[,3]/sd(ph.mod()$resid))\n    \n    colnames(x) = c(\"Grader ID\",\"Month\",\"Marbling score\",\"Hump height\",\"Ossification\",\"Rib fat\",\"pH\")\n    x = subset(x,x[,1]==input$individualGrader)\n    x$MonthNo = ordered(x$Month,month.name)\n    levels(x$MonthNo) = 1:12\n    DT::datatable(x, rownames = FALSE, \n                  options = list(dom = 't',\n                                 pageLength = 12, \n                                 order=list(list(7,'asc'))\n                  )\n    ) %>% DT::formatRound(columns = 3:7,digits=2)\n  })\n  \n  \n  \n  output$GraderSdTab = DT::renderDataTable({\n    marb.resid = aggregate(marb.mod()$resid,by=list(data()$grader),sd)\n    hump.resid = aggregate(hump.mod()$resid,by=list(data()$grader),sd)\n    oss.resid = aggregate(oss.mod()$resid,by=list(data()$grader),sd)\n    rbf.resid = aggregate(rbf.mod()$resid,by=list(data()$grader),sd)\n    ph.resid = aggregate(ph.mod()$resid,by=list(data()$grader),sd)\n    x = data.frame(marb.resid,hump.resid[,2],oss.resid[,2],rbf.resid[,2],ph.resid[,2])\n    colnames(x) = c(\"Grader ID\",\"Marbling score\",\"Hump height\",\"Ossification\",\"Rib fat\",\"pH\")\n    DT::datatable(x,rownames = FALSE,options = list(dom = 't')) %>% DT::formatRound(columns = 2:6,digits=2)\n  })\n  \n  \n  output$GraderSDMonthTab = DT::renderDataTable({\n    marb.resid = aggregate(marb.mod()$resid,by=list(data()$grader,data()$month),sd)\n    hump.resid = aggregate(hump.mod()$resid,by=list(data()$grader,data()$month),sd)\n    oss.resid = aggregate(oss.mod()$resid,by=list(data()$grader,data()$month),sd)\n    rbf.resid = aggregate(rbf.mod()$resid,by=list(data()$grader,data()$month),sd)\n    ph.resid = aggregate(ph.mod()$resid,by=list(data()$grader,data()$month),sd)\n    x = data.frame(marb.resid,hump.resid[,3],oss.resid[,3],rbf.resid[,3],ph.resid[,3])\n    \n    colnames(x) = c(\"Grader ID\",\"Month\",\"Marbling score\",\"Hump height\",\"Ossification\",\"Rib fat\",\"pH\")\n    x = subset(x,x[,1]==input$individualGrader)\n    x$MonthNo = ordered(x$Month,month.name)\n    levels(x$MonthNo) = 1:12\n    DT::datatable(x, rownames = FALSE, \n                  options = list(dom = 't',\n                                 pageLength = 12, \n                                 order=list(list(7,'asc'))\n                  )\n    ) %>% DT::formatRound(columns = 3:7,digits=2)\n  })\n  \n  output$phGraderMonthlyPlot = renderPlot({\n    ph.dat = data.frame(data()$grader,data()$ph,ph.mod()$residuals,data()$month)\n    plot.monthly.fn(data = ph.dat, title = \"pH\")\n  })\n  \n  output$rbfGraderMonthlyPlot = renderPlot({\n    rbf.dat = data.frame(data()$grader,data()$ribfatcold,rbf.mod()$residuals,data()$month)\n    plot.monthly.fn(data = rbf.dat, title = \"Rib fat\")\n  })\n  output$humpGraderMonthlyPlot = renderPlot({\n    hump.dat = data.frame(data()$grader,data()$humpcold,hump.mod()$residuals,data()$month)\n    plot.monthly.fn(data = hump.dat, title = \"Hump height\")\n  })\n  output$marbGraderMonthlyPlot = renderPlot({\n    marb.dat = data.frame(data()$grader,data()$msamarbling,marb.mod()$residuals,data()$month)\n    plot.monthly.fn(data = marb.dat, title = \"MSA marbling\")\n  })\n  \n  output$ossGraderMonthlyPlot = renderPlot({\n    oss.dat = data.frame(data()$grader,data()$ossificationcold,oss.mod()$residuals,data()$month)\n    plot.monthly.fn(data = oss.dat, title = \"Ossification\")\n  })\n  \n  output$phGraderMonthlyPlot2 = renderPlot({\n    dat = data.frame(data()$grader,data()$ph,ph.mod()$residuals,data()$month)\n    dat = subset(dat,dat[,1]==input$individualGrader)\n    plot.monthly.fn2(data = dat, title = \"pH\")\n  })\n  \n  output$rbfGraderMonthlyPlot2 = renderPlot({\n    dat = data.frame(data()$grader,data()$ribfatcold,rbf.mod()$residuals,data()$month)\n    dat = subset(dat,dat[,1]==input$individualGrader)\n    plot.monthly.fn2(data = dat, title = \"Rib fat\")\n  })\n  output$humpGraderMonthlyPlot2 = renderPlot({\n    dat = data.frame(data()$grader,data()$humpcold,hump.mod()$residuals,data()$month)\n    dat = subset(dat,dat[,1]==input$individualGrader)\n    plot.monthly.fn2(data = dat, title = \"Hump height\")\n  })\n  output$marbGraderMonthlyPlot2 = renderPlot({\n    dat = data.frame(data()$grader,data()$msamarbling,marb.mod()$residuals,data()$month)\n    dat = subset(dat,dat[,1]==input$individualGrader)\n    plot.monthly.fn2(data = dat, title = \"MSA marbling\")\n  })\n  \n  output$ossGraderMonthlyPlot2 = renderPlot({\n    dat = data.frame(data()$grader,data()$ossificationcold,oss.mod()$residuals,data()$month)\n    dat = subset(dat,dat[,1]==input$individualGrader)\n    plot.monthly.fn2(data = dat, title = \"Ossification\")\n  })\n  \n  \n  \n  output$PredictiveTab = DT::renderDataTable({\n    r2 = c(summary(marb.mod())$r.sq*100, \n           summary(hump.mod())$r.sq*100, \n           summary(oss.mod())$r.sq*100, \n           summary(rbf.mod())$r.sq*100, \n           summary(ph.mod())$r.sq*100)\n    stdevs = c(sd(marb.mod()$resid), \n               sd(hump.mod()$resid), \n               sd(oss.mod()$resid), \n               sd(rbf.mod()$resid), \n               sd(ph.mod()$resid))\n    res = data.frame(matrix(c(r2,stdevs),ncol=5,byrow = TRUE))\n    colnames(res) = c(\"Marbling score\",\"Hump height\",\"Ossification\",\"Rib fat\",\"pH\")\n    rownames(res) = c(\"R2\",\"Residual SD\")\n    DT::datatable(res,rownames = TRUE,options = list(dom = 't')) %>% DT::formatRound(columns = 1:5,digits=1)\n  })\n  \n  output$ossGraderPlot = renderPlot({\n    oss.dat = data.frame(data()$grader,data()$ossificationcold,oss.mod()$residuals)\n    plot.fn(data = oss.dat, title = \"Ossification\")\n  })\n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n",
    "created" : 1469757833277.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2024702370",
    "id" : "8F22C539",
    "lastKnownWriteTime" : 1469757852,
    "last_content_update" : 1469757852653,
    "path" : "~/Dropbox/Consulting/Meat/gcheck/gcheck/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}